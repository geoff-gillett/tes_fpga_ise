--------------------------------------------------------------------------------
-- Engineer: Geoff Gillett
-- Date:11 Nov 2015
--
-- Design Name: TES_digitiser
-- Module Name: eventstream_mux
-- Project Name: eventlib 
-- Target Devices: virtex6
-- Tool versions: ISE 14.7
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
--
library teslib;
use teslib.types.all;
use teslib.functions.all;
--
library streamlib;
use streamlib.stream.all;

use work.events.all;

-- merges instreams keeping temporal order incorporates tickstream
entity eventstream_mux is
generic(
  CHANNEL_BITS:integer:=3;
  RELTIME_BITS:integer:=16;
  TIMESTAMP_BITS:integer:=64;
  TICK_BITS:integer:=32;
  MIN_TICKPERIOD:integer:=2**16
);
port(
  clk:in std_logic;
  reset:in std_logic;
  -- from channel captures
  start:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  commit:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  dump:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  --
  instreams:in streambus_array(2**CHANNEL_BITS-1 downto 0);
  --pulsestream_lasts:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  instream_valids:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  instream_readys:out boolean_vector(2**CHANNEL_BITS-1 downto 0);
  full:out boolean;
  -- tick event
  tick_period:in unsigned(TICK_BITS-1 downto 0);
  overflows:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  --dirty:in boolean_vector(2**CHANNEL_BITS-1 downto 0);
  --
  outstream:out streambus_t;
  valid:out boolean;
  --last:out boolean;
  ready:in boolean
);
end entity eventstream_mux;
--
architecture RTL of eventstream_mux is
	
constant CHANNELS:integer:=2**CHANNEL_BITS;

signal timestamp,eventtime:unsigned(TIMESTAMP_BITS-1 downto 0);
signal reltime:unsigned(CHUNK_DATABITS-1 downto 0);
signal reltime_chunk:std_logic_vector(CHUNK_DATABITS-1 downto 0);
signal started,commited,dumped:std_logic_vector(CHANNELS-1 downto 0);
signal req,gnt:std_logic_vector(CHANNELS-1 downto 0);
signal handled:std_logic_vector(CHANNELS downto 0);
signal sel:std_logic_vector(CHANNELS downto 0);

signal ticked,tick,time_valid,read_next:boolean;
type FSMstate is (IDLE,HEAD,TAIL,NEXT_TIME);
signal state,nextstate:FSMstate;
signal tickstream:streambus_t;
signal stream_valid,ready_for_stream,stream_last:boolean;
signal tickstream_valid:boolean;
signal tickstream_ready:boolean;
--
signal streams:streambus_array(CHANNELS downto 0);
signal stream,stream_int:streambus_t;
signal valids,readys:boolean_vector(CHANNELS downto 0);
signal done:boolean;
signal handshake:boolean;
signal pulses_done:boolean;
signal stream_valid_int:boolean;
signal last_handshake:boolean;
--
begin

tickstreamer:entity work.tickstream
generic map(
  CHANNEL_BITS => CHANNEL_BITS,
  PERIOD_BITS => TICK_BITS,
  TIMESTAMP_BITS => TIMESTAMP_BITS,
  MINIMUM_PERIOD => MIN_TICKPERIOD
)
port map(
  clk => clk,
  reset => reset,
  tick => tick,
  timestamp => timestamp,
  tick_period => tick_period,
  overflow => overflows,
  tickstream => tickstream,
  valid => tickstream_valid,
  ready => tickstream_ready
);
--
buffers:entity work.timing_buffer
generic map(
  CHANNEL_BITS => CHANNEL_BITS,
  RELTIME_BITS => RELTIME_BITS,
  TIMESTAMP_BITS => TIMESTAMP_BITS
)
port map(
  clk => clk,
  reset => reset,
  start => start,
  commit => commit,
  dump => dump,
  tick => tick,
  timestamp => timestamp,
  eventtime => eventtime,
  reltime => reltime,
  started => started,
  ticked => ticked,
  commited => commited,
  dumped => dumped,
  valid => time_valid,
  read_next => read_next,
  full => full
);


--
-- clk1 req
-- clk2 gnt onehot index 
-- clk3 mux

readys <= (others => FALSE) when state=IDLE or not ready_for_stream 
														else to_boolean(sel);
	
--FIXME are these register slices needed?	
inputRegGen:for i in CHANNELS downto 1 generate
begin
	inputReg:entity streamlib.register_slice
  port map(
    clk => clk,
    reset => reset,
    stream_in => instreams(i-1),
    ready_out => instream_readys(i-1),
    valid_in => instream_valids(i-1),
    stream => streams(i),
    ready => readys(i),
    valid => valids(i)
  );
end generate;

tickInputReg:entity streamlib.register_slice
port map(
  clk => clk,
  reset => reset,
  stream_in => tickstream,
  ready_out => tickstream_ready,
  valid_in => tickstream_valid,
  stream => streams(0),
  ready => readys(0),
  valid => valids(0)
);

selector:entity work.eventstream_select
generic map(
  CHANNELS => CHANNELS+1
)
port map(
  sel => sel,
  instreams => streams,
  valids => valids,
  mux_stream => stream,
  mux_valid => stream_valid
);
stream_last <= stream.last(0);

pulses_done <= started = handled(CHANNELS downto 1);-- and time_valid; 
done <= pulses_done and to_std_logic(ticked) = handled(0);
read_next <= state=NEXT_TIME;
arbiter:process(clk)
begin
if rising_edge(clk) then
  if reset = '1' or state=NEXT_TIME then
  	req <= (others => '0');
  	gnt <= (others => '0');
  	sel <= (others => '0');
  	handled <= (others => '0');
  else
  	if time_valid then
  		req <= started and commited and not handled(CHANNELS downto 1);
      gnt <= req and std_logic_vector(unsigned(not req)+1);
--      if state=IDLE then 
      if last_handshake or state=IDLE then 
      	if pulses_done then 
	      	handled(0) <= to_std_logic(ticked);
      		sel <= (0 => to_std_logic(ticked), others => '0');
      	else
	      	handled <= handled or gnt & '0' or dumped & '0';
      		sel <= gnt & '0';
      	end if;
      end if;
  	else
  		sel <= (others => '0');
  		req <= (others => '0');
  		handled <= (others => '0');
  	end if;
	end if;
end if;
end process arbiter;

fsmNextstate:process(clk)
begin
if rising_edge(clk) then
  if reset = '1' then
  	state <= IDLE;
  else
    state <= nextstate;
  end if;
end if;
end process fsmNextstate;

handshake <= stream_valid_int and ready_for_stream;
last_handshake <= handshake and stream_last;
fsmTransition:process(state,sel,handshake,done,last_handshake)
begin
nextstate <= state;  		
case state is 
when IDLE =>
	if unaryOr(sel) then
		nextstate <= HEAD;
	elsif done then
		nextstate <= NEXT_TIME;
	end if;
when HEAD =>
	if last_handshake then
		nextstate <= NEXT_TIME;
	elsif handshake then
		nextstate <= TAIL;
	end if;
when TAIL =>
	if last_handshake then
		if done then
			nextstate <= NEXT_TIME;
		else
			nextstate <= IDLE;
		end if;
	end if;
when NEXT_TIME =>
	nextstate <= IDLE;
end case;
end process fsmTransition;

reltime_chunk <= to_std_logic(reltime) when state=HEAD 
																			 else stream.data(47 downto 32); 

stream_int.data <= stream.data(63 downto 48) &
									 reltime_chunk &
									 stream.data(31 downto 0);

stream_int.last <= stream.last;

--FIXME is this right?							
stream_valid_int <= stream_valid and state/=IDLE;

outStreamReg:entity streamlib.register_slice
port map(
  clk => clk,
  reset => reset,
  stream_in => stream_int,
  ready_out => ready_for_stream,
  valid_in => stream_valid_int,
  stream => outstream,
  ready => ready,
  valid => valid
);
end architecture RTL;
