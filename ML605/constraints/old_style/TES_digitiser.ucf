################################################################################
# ML605 development board TES_digitiser design
# mca_test constraints
# Geoff Gillett
################################################################################
#-------------------------------------------------------------------------------
# 200MHz Differential Clock. Other clock constraints will be inferred from DCM
#-------------------------------------------------------------------------------
#CONFIG PART = xc6vlx240tff1156-1;
NET "sys_clk_?" IOSTANDARD = LVDS_25;
NET "sys_clk_?" DIFF_TERM = "TRUE";

NET "sys_clk_p" LOC = J9;
NET "sys_clk_n" LOC = H9;
NET "sys_clk_p" TNM_NET = "sys_clk";
TIMESPEC TS_SYS_CLK = PERIOD "sys_clk" 5 ns HIGH 50 %;

NET "IO_clk" TNM_NET = "IO_clk";
NET "refclk" TNM_NET = "iodelay_ref_clk";
#NET "s_axi_aclk" TNM_NET = "axi_clk"; -- this old 100 MHz clk no longer implemented
#TIMESPEC TS_axi_clk = PERIOD "idelay_ref_clk" 10 ns HIGH 50 %;
#-------------------------------------------------------------------------------
# USB-UART LEDs and reset switch
#-------------------------------------------------------------------------------
NET "main_Rx" LOC = J24;
NET "main_Rx" IOSTANDARD = LVCMOS25;
NET "main_Tx" LOC = J25;
NET "main_Tx" IOSTANDARD = LVCMOS25;
NET "main_Tx" DRIVE = 4;
NET "main_Tx" SLEW = SLOW;
#NET "main_?x" TIG;


NET "global_reset" LOC = H10;
# LEDs for debuging
NET "LEDs[0]" LOC = AC22;
NET "LEDs[1]" LOC = AC24;
NET "LEDs[2]" LOC = AE22;
NET "LEDs[3]" LOC = AE23;
NET "LEDs[4]" LOC = AB23;
NET "LEDs[5]" LOC = AG23;
NET "LEDs[6]" LOC = AE24;
NET "LEDs[7]" LOC = AD24;
NET "LEDs[?]" TNM_NET = "LEDS";
NET "LEDs*" TIG;
################################################################################
# FMC108 ADC mezzanine card
################################################################################
# Texas instruments ADS62P49 dual ADC chips 
#-------------------------------------------------------------------------------
# LVDS clocks for each chip
#-------------------------------------------------------------------------------
NET "adc_clk_?[?]" IOSTANDARD = LVDS_25;
NET "adc_clk_?[?]" DIFF_TERM = "TRUE";
NET "adc_clk_n[0]" LOC = AF21;
NET "adc_clk_p[0]" LOC = AF20;
NET "adc_clk_n[1]" LOC = AL19;
NET "adc_clk_p[1]" LOC = AK19;
NET "adc_clk_n[2]" LOC = AM27;
NET "adc_clk_p[2]" LOC = AN27;
NET "adc_clk_n[3]" LOC = AJ25;
NET "adc_clk_p[3]" LOC = AH25;
NET "adc_clk_n[0]" LOC = AF21;
#-------------------------------------------------------------------------------
# LOCs for ADC clock BUFRs
#-------------------------------------------------------------------------------
INST "adcClks[0].adcClkBufr" LOC = BUFR_X1Y0;
INST "adcClks[1].adcClkBufr" LOC = BUFR_X1Y1;
INST "adcClks[2].adcClkBufr" LOC = BUFR_X1Y2;
INST "adcClks[3].adcClkBufr" LOC = BUFR_X1Y3;

#-------------------------------------------------------------------------------
# LVDS data from ADC 
#-------------------------------------------------------------------------------
NET "adc_data_?<?>[?]" IOSTANDARD = LVDS_25;
NET "adc_data_?<?>[?]" DIFF_TERM = "TRUE";

#-------------------------------------------------------------------------------
# LVDS data from ADC channel A (0)
#-------------------------------------------------------------------------------
NET "adc_data_n<0>[0]" LOC = AE19;
NET "adc_data_p<0>[0]" LOC = AF19;
NET "adc_data_n<0>[1]" LOC = AD19;
NET "adc_data_p<0>[1]" LOC = AC19;
NET "adc_data_n<0>[2]" LOC = AD20;
NET "adc_data_p<0>[2]" LOC = AC20;
NET "adc_data_n<0>[3]" LOC = AG21;
NET "adc_data_p<0>[3]" LOC = AG20;
NET "adc_data_n<0>[4]" LOC = AH22;
NET "adc_data_p<0>[4]" LOC = AG22;
NET "adc_data_n<0>[5]" LOC = AJ21;
NET "adc_data_p<0>[5]" LOC = AK21;
NET "adc_data_n<0>[6]" LOC = AJ22;
NET "adc_data_p<0>[6]" LOC = AK22;

#-------------------------------------------------------------------------------
# LVDS data from ADC channel B (1)
#-------------------------------------------------------------------------------
NET "adc_data_n<1>[0]" LOC = AC27;
NET "adc_data_p<1>[0]" LOC = AB27;
NET "adc_data_n<1>[1]" LOC = AC25;
NET "adc_data_p<1>[1]" LOC = AB25;
NET "adc_data_n<1>[2]" LOC = AA29;
NET "adc_data_p<1>[2]" LOC = AA28;
NET "adc_data_n<1>[3]" LOC = AB26;
NET "adc_data_p<1>[3]" LOC = AA26;
NET "adc_data_n<1>[4]" LOC = AB31;
NET "adc_data_p<1>[4]" LOC = AB30;
NET "adc_data_n<1>[5]" LOC = AC28;
NET "adc_data_p<1>[5]" LOC = AB28;
NET "adc_data_n<1>[6]" LOC = Y26;
NET "adc_data_p<1>[6]" LOC = AA25;

#-------------------------------------------------------------------------------
# LVDS data from ADC channel C (2)
#-------------------------------------------------------------------------------
NET "adc_data_n<2>[0]" LOC = AN22;
NET "adc_data_p<2>[0]" LOC = AM22;
NET "adc_data_n<2>[1]" LOC = AL21;
NET "adc_data_p<2>[1]" LOC = AM21;
NET "adc_data_n<2>[2]" LOC = AL20;
NET "adc_data_p<2>[2]" LOC = AM20;
NET "adc_data_n<2>[3]" LOC = AL18;
NET "adc_data_p<2>[3]" LOC = AM18;
NET "adc_data_n<2>[4]" LOC = AN18;
NET "adc_data_p<2>[4]" LOC = AP19;
NET "adc_data_n<2>[5]" LOC = AL23;
NET "adc_data_p<2>[5]" LOC = AM23;
NET "adc_data_n<2>[6]" LOC = AN20;
NET "adc_data_p<2>[6]" LOC = AN19;

#-------------------------------------------------------------------------------
# LVDS data from ADC channel D (3)
#-------------------------------------------------------------------------------
NET "adc_data_n<3>[1]" LOC = AA31;
NET "adc_data_p<3>[1]" LOC = AA30;
NET "adc_data_n<3>[2]" LOC = AC32;
NET "adc_data_p<3>[2]" LOC = AB32;
NET "adc_data_n<3>[0]" LOC = AD31;
NET "adc_data_p<3>[0]" LOC = AE31;
NET "adc_data_n<3>[3]" LOC = AE32;
NET "adc_data_p<3>[3]" LOC = AD32;
NET "adc_data_n<3>[4]" LOC = AC34;
NET "adc_data_p<3>[4]" LOC = AD34;
NET "adc_data_n<3>[5]" LOC = AG32;
NET "adc_data_p<3>[5]" LOC = AG33;
NET "adc_data_n<3>[6]" LOC = AF31;
NET "adc_data_p<3>[6]" LOC = AG31;

#-------------------------------------------------------------------------------
# LVDS data from ADC channel E (4)
#-------------------------------------------------------------------------------
NET "adc_data_n<4>[0]" LOC = AM26;
NET "adc_data_p<4>[0]" LOC = AL26;
NET "adc_data_n<4>[1]" LOC = AN24;
NET "adc_data_p<4>[1]" LOC = AN25;
NET "adc_data_n<4>[2]" LOC = AL24;
NET "adc_data_p<4>[2]" LOC = AK23;
NET "adc_data_n<4>[3]" LOC = AN23;
NET "adc_data_p<4>[3]" LOC = AP22;
NET "adc_data_n<4>[4]" LOC = AP26;
NET "adc_data_p<4>[4]" LOC = AP27;
NET "adc_data_n<4>[5]" LOC = AL25;
NET "adc_data_p<4>[5]" LOC = AM25;
NET "adc_data_n<4>[6]" LOC = AP29;
NET "adc_data_p<4>[6]" LOC = AN29;

#-------------------------------------------------------------------------------
# LVDS data from ADC channel F (5)
#-------------------------------------------------------------------------------
NET "adc_data_n<5>[0]" LOC = AN34;
NET "adc_data_p<5>[0]" LOC = AN33;
NET "adc_data_n<5>[1]" LOC = AG30;
NET "adc_data_p<5>[1]" LOC = AF30;
NET "adc_data_n<5>[2]" LOC = AK34;
NET "adc_data_p<5>[2]" LOC = AL34;
NET "adc_data_n<5>[3]" LOC = AL33;
NET "adc_data_p<5>[3]" LOC = AM33;
NET "adc_data_n<5>[4]" LOC = AM32;
NET "adc_data_p<5>[4]" LOC = AN32;
NET "adc_data_n<5>[5]" LOC = AP33;
NET "adc_data_p<5>[5]" LOC = AP32;
NET "adc_data_n<5>[6]" LOC = AM31;
NET "adc_data_p<5>[6]" LOC = AL30;

#-------------------------------------------------------------------------------
# LVDS data from ADC channel G (6) 
#-------------------------------------------------------------------------------
NET "adc_data_n<6>[0]" LOC = AK28;
NET "adc_data_p<6>[0]" LOC = AL28;
NET "adc_data_n<6>[1]" LOC = AP31;
NET "adc_data_p<6>[1]" LOC = AP30;
NET "adc_data_n<6>[2]" LOC = AM30;
NET "adc_data_p<6>[2]" LOC = AN30;
NET "adc_data_n<6>[3]" LOC = AM28;
NET "adc_data_p<6>[3]" LOC = AN28;
NET "adc_data_n<6>[4]" LOC = AJ27;
NET "adc_data_p<6>[4]" LOC = AK27;
NET "adc_data_n<6>[5]" LOC = AK24;
NET "adc_data_p<6>[5]" LOC = AJ24;
NET "adc_data_n<6>[6]" LOC = AK29;
NET "adc_data_p<6>[6]" LOC = AL29;

#-------------------------------------------------------------------------------
# LVDS from ADC channel H (7) 
#-------------------------------------------------------------------------------
NET "adc_data_n<7>[0]" LOC = AH32;
NET "adc_data_p<7>[0]" LOC = AH33;
NET "adc_data_n<7>[1]" LOC = AF29;
NET "adc_data_p<7>[1]" LOC = AF28;
NET "adc_data_n<7>[2]" LOC = AD27;
NET "adc_data_p<7>[2]" LOC = AE27;
NET "adc_data_n<7>[3]" LOC = AE29;
NET "adc_data_p<7>[3]" LOC = AE28;
NET "adc_data_n<7>[4]" LOC = AJ32;
NET "adc_data_p<7>[4]" LOC = AJ31;
NET "adc_data_n<7>[5]" LOC = AJ30;
NET "adc_data_p<7>[5]" LOC = AJ29;
NET "adc_data_n<7>[6]" LOC = AK32;
NET "adc_data_p<7>[6]" LOC = AK33;

#-------------------------------------------------------------------------------
#  ADS62P49 SPI pins
#  TI labels the SPI pins as follows
#     spi_clk  -> SCLK     serial clock
#     spi_ce_n -> SEN      low active chip enable
#     spi_mosi -> SDATA    data to chip 
#     spi_miso -> SDOUT    data from chip
#-------------------------------------------------------------------------------
NET "ADC_spi_ce_n[0]" LOC = V33;
NET "ADC_spi_ce_n[1]" LOC = U31;
NET "ADC_spi_ce_n[2]" LOC = U30;
NET "ADC_spi_ce_n[3]" LOC = U28;
NET "ADC_spi_miso[0]" LOC = AE33;
NET "ADC_spi_miso[1]" LOC = AF33;
NET "ADC_spi_miso[2]" LOC = AD29;
NET "ADC_spi_miso[3]" LOC = AC29;
NET "ADC_spi_mosi" LOC = U27;
NET "ADC_spi_clk" LOC = U26;
NET "AD9510_spi_ce_n" LOC = AH23;
NET "AD9510_spi_miso" LOC = T33;
NET "AD9510_spi_mosi" LOC = AG26;
NET "AD9510_spi_clk" LOC = AG25;
NET "ADC_spi_*" TIG;
NET "AD9510_spi_*" TIG;

#-------------------------------------------------------------------------------
# AD9510 PLL
#-------------------------------------------------------------------------------
NET "FMC_internal_clk_en" LOC = AH29;
NET "FMC_VCO_power_en" LOC = AP21;
NET "FMC_AD9510_status" LOC = T34;
NET "FMC_AD9510_function" LOC = U33;

#-------------------------------------------------------------------------------
# other FMC108 pins
#-------------------------------------------------------------------------------
NET "FMC_reset" LOC = V29;
NET "FMC_power_good" LOC = J27;
NET "FMC_present_n" LOC = AP25;

#-------------------------------------------------------------------------------
# 250Mhz source clk from the first (0) ADC chip drives the MMCM
# Other clock constraints will be inferred from MMCM component
#-------------------------------------------------------------------------------
NET "adc_clk_p[0]" TNM_NET = "adc_chip0_clk";
TIMESPEC TS_adc_chip0_clk = PERIOD "adc_chip0_clk" 4 ns HIGH 50 %;
NET "adc_clk_p[1]" TNM_NET = "adc_chip1_clk";
TIMESPEC TS_adc_chip1_clk = PERIOD "adc_chip1_clk" 4 ns HIGH 50 %;
NET "adc_clk_p[2]" TNM_NET = "adc_chip2_clk";
TIMESPEC TS_adc_chip2_clk = PERIOD "adc_chip2_clk" 4 ns HIGH 50 %;
NET "adc_clk_p[3]" TNM_NET = "adc_chip3_clk";
TIMESPEC TS_adc_chip3_clk = PERIOD "adc_chip3_clk" 4 ns HIGH 50 %;

NET "signal_clk" TNM_NET = "signal_clk";
#TIMESPEC TS_SIGNAL_CLK = PERIOD "signal_clk" 4 ns HIGH 50 %;
NET "io_clk" TNM_NET = "io_clk";
#TIMESPEC TS_IO_CLK = PERIOD "io_clk" TS_SIGNAL_CLK / 2;

TIMESPEC TS_chip0tosignal = FROM "adc_chip0_clk" TO "signal_clk" TIG;
TIMESPEC TS_signaltochip0 = FROM "signal_clk" TO "adc_chip0_clk" TIG;
TIMESPEC TS_chip1tosignal = FROM "adc_chip1_clk" TO "signal_clk" TIG;
TIMESPEC TS_signaltochip1 = FROM "signal_clk" TO "adc_chip1_clk" TIG;
TIMESPEC TS_chip2tosignal = FROM "adc_chip2_clk" TO "signal_clk" TIG;
TIMESPEC TS_signaltochip2 = FROM "signal_clk" TO "adc_chip2_clk" TIG;
TIMESPEC TS_chip3tosignal = FROM "adc_chip3_clk" TO "signal_clk" TIG;
TIMESPEC TS_signaltochip3 = FROM "signal_clk" TO "adc_chip3_clk" TIG;

#-------------------------------------------------------------------------------
################################################################################
# VIRTEX 6 embedded (HARD) MAC (Taken from the example design)
################################################################################
NET "frame_error" LOC = AH28;
NET "frame_error" IOSTANDARD = LVCMOS25;
NET "frame_errorn" LOC = AH27;
NET "frame_errorn" IOSTANDARD = LVCMOS25;

#### Module Push_Buttons_4Bit constraints
NET "update_speed" LOC = G26;
NET "update_speed" IOSTANDARD = LVCMOS15;
NET "serial_command" LOC = G17;
NET "serial_command" IOSTANDARD = LVCMOS15;
NET "pause_req_s" LOC = A19;
NET "pause_req_s" IOSTANDARD = LVCMOS15;
NET "reset_error" LOC = A18;
NET "reset_error" IOSTANDARD = LVCMOS15;

#### Module DIP_Switches_4Bit constraints
NET "mac_speed[0]" LOC = D22;
NET "mac_speed[0]" IOSTANDARD = LVCMOS15;
NET "mac_speed[1]" LOC = C22;
NET "mac_speed[1]" IOSTANDARD = LVCMOS15;
#Net gen_tx_data      LOC = L21  | IOSTANDARD = LVCMOS15;
#Net chk_tx_data      LOC = L20  | IOSTANDARD = LVCMOS15;
#Net swap_address     LOC = C18  | IOSTANDARD = LVCMOS15;

NET "phy_resetn" TIG;
NET "phy_resetn" LOC = AH13;
NET "phy_resetn" IOSTANDARD = LVCMOS25;
NET "mdc" LOC = AP14;
NET "mdc" IOSTANDARD = LVCMOS25;
NET "mdio" LOC = AN14;
NET "mdio" IOSTANDARD = LVCMOS25;

# lock to unused header
NET "serial_response" S = "TRUE";
#LOC = AN23 | IOSTANDARD = LVCMOS25;
NET "tx_statistics_s" S = "TRUE";
#LOC = AP22 | IOSTANDARD = LVCMOS25;
NET "rx_statistics_s" S = "TRUE";
#LOC = AG21 | IOSTANDARD = LVCMOS25;

NET "gmii_rxd[7]" LOC = AC13;
NET "gmii_rxd[7]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[6]" LOC = AC12;
NET "gmii_rxd[6]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[5]" LOC = AD11;
NET "gmii_rxd[5]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[4]" LOC = AM12;
NET "gmii_rxd[4]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[3]" LOC = AN12;
NET "gmii_rxd[3]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[2]" LOC = AE14;
NET "gmii_rxd[2]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[1]" LOC = AF14;
NET "gmii_rxd[1]" IOSTANDARD = LVCMOS25;
NET "gmii_rxd[0]" LOC = AN13;
NET "gmii_rxd[0]" IOSTANDARD = LVCMOS25;


NET "gmii_txd[7]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[6]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[5]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[4]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[3]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[2]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[1]" IOSTANDARD = LVCMOS25;
NET "gmii_txd[0]" IOSTANDARD = LVCMOS25;

NET "gmii_tx_en" LOC = AJ10;
NET "gmii_tx_er" LOC = AH10;
NET "gmii_txd[0]" LOC = AM11;
NET "gmii_txd[1]" LOC = AL11;
NET "gmii_txd[2]" LOC = AG10;
NET "gmii_txd[3]" LOC = AG11;
NET "gmii_txd[4]" LOC = AL10;
NET "gmii_txd[5]" LOC = AM10;
NET "gmii_txd[6]" LOC = AE11;
NET "gmii_txd[7]" LOC = AF11;

NET "gmii_col" LOC = AK13;
NET "gmii_col" IOSTANDARD = LVCMOS25;
NET "gmii_crs" LOC = AL13;
NET "gmii_crs" IOSTANDARD = LVCMOS25;
NET "mii_tx_clk" LOC = AD12;
NET "mii_tx_clk" IOSTANDARD = LVCMOS25;

NET "gmii_tx_en" IOSTANDARD = LVCMOS25;
NET "gmii_tx_er" IOSTANDARD = LVCMOS25;
NET "gmii_tx_clk" LOC = AH12;
NET "gmii_tx_clk" IOSTANDARD = LVCMOS25;

NET "gmii_rx_dv" LOC = AM13;
NET "gmii_rx_dv" IOSTANDARD = LVCMOS25;
NET "gmii_rx_er" LOC = AG12;
NET "gmii_rx_er" IOSTANDARD = LVCMOS25;
# P20 - GCLK7
NET "gmii_rx_clk" LOC = AP11;
NET "gmii_rx_clk" IOSTANDARD = LVCMOS25;
################################################################################
# Ethernet GTX_CLK high quality 125 MHz reference clock
#NET "TEMAC/gtx_clk_bufg" TNM_NET = "ref_gtx_clk";
#TIMEGRP v6_emac_v2_3_0_clk_ref_gtx =  "ref_gtx_clk";
#TIMESPEC TS_v6_emac_v2_3_0_clk_ref_gtx = PERIOD "v6_emac_v2_3_0_clk_ref_gtx" 8 ns HIGH 50 %;

# Multiplexed 1 Gbps, 10/100 Mbps output inherits constraint from GTX_CLK
NET "*tx_mac_aclk*" TNM_NET = "clk_tx_mac";
TIMEGRP v6_emac_v2_3_0_clk_ref_mux =  "clk_tx_mac";
#TIMESPEC TS_v6_emac_v2_3_0_clk_ref_mux = PERIOD "v6_emac_v2_3_0_clk_ref_mux" TS_v6_emac_v2_3_0_clk_ref_gtx  HIGH 50 %;
TIMESPEC TS_v6_emac_v2_3_0_clk_ref_mux = PERIOD "v6_emac_v2_3_0_clk_ref_mux" 8 ns HIGH 50 %;

# Ethernet GMII PHY-side receive clock
NET "gmii_rx_clk" TNM_NET = "phy_clk_rx";
TIMEGRP v6_emac_v2_3_0_clk_phy_rx =  "phy_clk_rx";
TIMESPEC TS_v6_emac_v2_3_0_clk_phy_rx = PERIOD "v6_emac_v2_3_0_clk_phy_rx" 7.5 ns HIGH 50 %;

# Constrain the host interface clock to an example frequency of 125 MHz
NET "*s_axi_aclk" TNM_NET = "clk_axi";
TIMEGRP v6_emac_v2_3_0_config_clk =  "clk_axi";
TIMESPEC TS_v6_emac_v2_3_0_config_clk = PERIOD "v6_emac_v2_3_0_config_clk" 8 ns HIGH 50 %;

# define TIGs between unrelated clock domains
#TIMESPEC TS_clock_path_gtx2cpu = FROM "IO_clk" TO "axi_clk" TIG ;
TIMESPEC TS_clock_path_gtx2ref = FROM "IO_clk" TO "iodelay_ref_clk" TIG ;
#TIMESPEC TS_clock_path_cpu2gtx = FROM "axi_clk" TO "IO_clk" TIG ;
##
PIN "*bufgmux_speed_clk.I1" TIG;
PIN "*bufgmux_speed_clk.CE0" TIG;

# define TIGs on reset synchronizer FDPE PRE inputs
PIN "*reset_sync1.PRE" TIG;
PIN "*reset_sync2.PRE" TIG;

#
####
#######
##########
#############
#################
#FIFO BLOCK CONSTRAINTS

###############################################################################
# AXI FIFO CONSTRAINTS
# The following constraints are necessary for proper operation of the AXI
# FIFO. If you choose to not use the FIFO Block level of wrapper hierarchy,
# these constraints should be removed.
###############################################################################

# AXI FIFO transmit-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?tx_fifo_i?rd_tran_frame_tog" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_retran_frame_tog" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_txfer_tog" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?wr_frame_in_fifo" TNM = "tx_fifo_wr_to_rd";

TIMESPEC TS_tx_fifo_rd_to_wr = FROM "tx_fifo_rd_to_wr" TO "v6_emac_v2_3_0_clk_ref_mux" 8 ns DATAPATHONLY;
TIMESPEC TS_tx_fifo_wr_to_rd = FROM "tx_fifo_wr_to_rd" TO "v6_emac_v2_3_0_clk_ref_mux" 8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*" TNM = "tx_metastable";
INST "*user_side_FIFO?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable";
TIMESPEC TS_tx_meta_protect = FROM "tx_metastable" 5 ns DATAPATHONLY;

# Transmit-side AXI FIFO address bus timing
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_addr_rd";
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*" TNM = "tx_addr_wr";
TIMESPEC TS_tx_fifo_addr = FROM "tx_addr_rd" TO "tx_addr_wr" 10 ns;

# AXI FIFO receive-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?rx_fifo_i?wr_store_frame_tog" TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO?rx_fifo_i?rd_addr*" TNM = "rx_fifo_rd_to_wr";

#TIMESPEC TS_rx_fifo_wr_to_rd = FROM "rx_fifo_wr_to_rd" TO "v6_emac_v2_3_0_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC TS_rx_fifo_wr_to_rd = FROM "rx_fifo_wr_to_rd" TO "IO_clk" 8 ns DATAPATHONLY;
TIMESPEC TS_rx_fifo_rd_to_wr = FROM "rx_fifo_rd_to_wr" TO "v6_emac_v2_3_0_clk_phy_rx" 8 ns DATAPATHONLY;


#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

# Locate the Tri-Mode Ethernet MAC instance
INST "TEMAC/v6emac_fifo_block/v6emac_block/v6emac_core/BU2/U0/v6_emac" LOC = TEMAC_X0Y0;

###############################################################################
# PHYSICAL INTERFACE CONSTRAINTS
# The following constraints are necessary for proper operation, and are tuned
# for this example design. They should be modified to suit your design.
###############################################################################

# GMII physical interface constraints
# -----------------------------------------------------------------------------

# Set the IDELAY values on the PHY inputs, tuned for this example design.
# These values should be modified to suit your design.
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/delay_gmii_rx_dv" IDELAY_VALUE = 23;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/delay_gmii_rx_er" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd" IDELAY_VALUE = 23;

# Group all IDELAY-related blocks to use a single IDELAYCTRL
INST "*dlyctrl" IODELAY_GROUP = "gmii_idelay";
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IODELAY_GROUP = "gmii_idelay";
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IODELAY_GROUP = "gmii_idelay";
INST "*v6emac_block*gmii_interface*delay_gmii_rxd" IODELAY_GROUP = "gmii_idelay";

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2 ns setup time and 0 ns hold time.
INST "gmii_rxd[?]" TNM = "gmii_rx";
INST "gmii_rx_dv" TNM = "gmii_rx";
INST "gmii_rx_er" TNM = "gmii_rx";
TIMEGRP "gmii_rx" OFFSET = IN 2 ns VALID 2 ns BEFORE "gmii_rx_clk" RISING;

# Constrain the GMII physical interface flip-flops to IOBs
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_0" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_1" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_2" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_3" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_4" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_5" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_6" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rxd_to_mac_7" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rx_dv_to_mac" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/rx_er_to_mac" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_7" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_6" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_5" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_4" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_3" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_2" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_1" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_txd_0" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_tx_en" IOB =TRUE;
INST "TEMAC/v6emac_fifo_block/v6emac_block/gmii_interface/gmii_tx_er" IOB =TRUE;

# Location constraints are chosen for this example design.
# These values should be modified to suit your design.
# * Note that regional clocking imposes certain requirements
#   on the location of the physical interface pins and the TEMAC instance.
#   Please refer to the Virtex-6 FPGA Embedded Tri-Mode Ethernet MAC
#   User Guide for additional details. *
#
# Locate the GMII physical interface pins
# Locate the 125 MHz reference clock buffer
INST "TEMAC/v6emac_fifo_block/v6emac_block/BUFGMUX_SPEED_CLK" LOC = BUFGCTRL_X0Y6;
###############################################################################
# TES_digitiser timing constraints
###############################################################################
PIN "mainCPU.reset?" TIG;
#NET "*channel_tx*" TIG;
#NET "*channel_rx*" TIG;
PIN "mainCPU.main_?x" TIG;
PIN "mainCPU.channel_?x" TIG;
PIN "*spi_clk" TIG;
#NET "*spi_ce_n*" TIG;
#NET "*spi_miso*" TIG;
#NET "*spi_mosi" TIG;
NET "FMC_AD9510_status" TIG;
NET "FMC_power_good" TIG;
NET "FMC_present_n" TIG;
#NET "globalRegisters/flags_reg*" TIG;

#
#NET "*CPU*" TNM_NET = "CPU_inports";
#NET "*regIOblock/data_int*" TNM_NET = "regData";
#NET "*regIOblock/address_int*" TNM_NET = "regAddress";
#TIMEGRP CPU2reg =  "regData" "regAddress";
#
#NET "globalRegisters/*_reg*" TNM_NET = "global_registers";
#NET "*channelRegisters/*_reg*" TNM_NET = "channel_registers";
#TIMEGRP registers =  "global_registers" "channel_registers";

#TIMESPEC TS_pipeline2IO = FROM "pipeline_clk" TO "IO_clk" TIG ;
#TIMESPEC TS_IO2pipeline = FROM "IO_clk" TO "pipeline_clk" TIG ;

#TIMESPEC TS_reg_to_CPU = FROM "registers" TO "CPU_inports" 8 ns;
#TIMESPEC TS_CPU_to_reg = FROM "CPU2reg" TO "registers" 8 ns;
# Fixing problems in frame_to_stream
#NET "*serialiser*data_shifter*" TNM_NET = "serialiser_shifter";
#NET "*ram_data" TNM_NET = "frame_ram";
#TIMESPEC TS_frameram2shifter = FROM "frame_ram" TO "serialiser_shifter" 3.5 ns;
###############################################################################
