################################################################################
# ML605 development board TES digitiser design
# Geoff Gillett
################################################################################
NET "cpu/reset*" TIG;
################################################################################
# Register CDC
################################################################################
# FROM channel registers TO channel CPU

#INST "tesChannel[?].registers" TNM_NET = "chan_reg";
#INST "tesChannel[?].cpu" TNM_NET = "chan_cpu";
#TIMESPEC TS_chan_reg2cpu = FROM "chan_reg" TO "chan_cpu" 12 ns;
#TIMESPEC TS_chan_cpu2reg = FROM "chan_cpu" TO "chan_reg" 12 ns;
#NET "tesChannel[?].cpu/reg_write" TNM_NET = "chan_write";
#TIMESPEC TS_chan_write = FROM "chan_write" 8 ns;

INST tesChannel[?].cpu TNM = "channel_cpu";
INST tesChannel[?].registers TNM = "channel_reg";
TIMESPEC TS_channel_reg2cpu = FROM "channel_reg" TO "channel_cpu" 8 ns;
TIMESPEC TS_channel_cpu2reg = FROM "channel_cpu" TO "channel_reg" 8 ns;
INST "tesChannel[?].regWriteSync" TNM = "channel_writesync";
TIMESPEC TS_channel_write = FROM "channel_cpu" TO "channel_writesync" 8 ns;

INST cpu TNM = "main_cpu";
INST registers TNM = "main_reg";
TIMESPEC TS_main_reg2cpu = FROM "main_reg" TO "main_cpu" 8 ns;
TIMESPEC TS_main_cpu2reg = FROM "main_cpu" TO "main_reg" 8 ns;
PIN "cpu/reg_write" TNM = "main_write";
TIMESPEC TS_main_write = FROM "main_write" 8 ns;

# FROM chan reg to CPU
#NET "tesChannel[?].cpu/reg_value[?]" TNM_NET = "chan_value";
#NET "tesChannel[?].cpu/axis_*" TNM_NET = "chan_axis";
# FROM channel CPU to channel registers
#NET "tesChannel[?].registers/data[?]" TNM_NET = "chan_data";
#NET "tesChannel[?].registers/address[?]" TNM_NET = "chan_address";
#NET "tesChannel[?].regWriteSync/input" TNM_NET = "chan_write";

# FROM main global registers to CPU
#NET "cpu/value[?]" TNM_NET = "main_value";
# FROM CPU to global registers
#NET "registers/data[?]" TNM_NET = "main_data";
#NET "registers/address[?]" TNM_NET = "main_address";
#NET "regWriteSync/input" TNM_NET = "main_write";

#TIMEGRP "chan_reg_cdc" = "chan_value" "chan_axis" "chan_data" "chan_address" "chan_write";
#TIMESPEC TS_chan_reg_cdc = TO "chan_reg_cdc" 12 ns;

#TIMEGRP "main_reg_cdc" = "main_value" "main_data" "main_address" "main_write";
#TIMESPEC TS_main_reg_cdc = TO "main_reg_cdc" 12 ns;

################################################################################
# ADC input FIFO cdc constraint the ISE tools bawk at my clocking arrangement
################################################################################
#NET "adcChip[0].adcChanGen[0].FIFO/U0/xst_fifo_generator/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.gcx.clkx/gsync_stage[1].rd_stg_inst/D*" TNM_NET = "adc_fifo_sync_1";
#NET "adcChipGen[0].adcChanGen[0].FIFO/U0/xst_fifo_generator/gconvfifo.rf/grf.rf/gntv_or_sync_fifo.gcx.clkx/gsync_stage[2].rd_stg_inst/D*" TNM_NET = "adc_fifo_sync_2";

#TIMESPEC TS_adcfifo_rd_sync = FROM "adc_fifo_sync_1" TO "adc_fifo_sync_2" 4 ns DATAPATHONLY;

################################################################################
# Virtex6 EMAC example design constraints 
################################################################################
# CLOCK CONSTRAINTS
# The following constraints are required. If you choose to not use the example
# design level of wrapper hierarchy, the net names should be translated to
# match your design.
###############################################################################
#NET "clk_in_p" TNM_NET = "clk_in_p";
#TIMESPEC "TS_v6_emac_v2_3_0_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;

# Ethernet GTX_CLK high quality 125 MHz reference clock
NET "emac/gtx_clk_bufg" TNM_NET = "ref_gtx_clk";
TIMEGRP "v6_emac_v2_3_0_clk_ref_gtx" = "ref_gtx_clk";
TIMESPEC "TS_v6_emac_v2_3_0_clk_ref_gtx" = PERIOD "v6_emac_v2_3_0_clk_ref_gtx" 8 ns HIGH 50 %;

# Multiplexed 1 Gbps, 10/100 Mbps output inherits constraint from GTX_CLK
NET "*tx_mac_aclk*" TNM_NET  = "clk_tx_mac";
TIMEGRP "v6_emac_v2_3_0_clk_ref_mux" = "clk_tx_mac";
TIMESPEC "TS_v6_emac_v2_3_0_clk_ref_mux" = PERIOD "v6_emac_v2_3_0_clk_ref_mux" TS_v6_emac_v2_3_0_clk_ref_gtx HIGH 50%;

# Ethernet GMII PHY-side receive clock
NET "gmii_rx_clk" TNM_NET = "phy_clk_rx";
TIMEGRP "v6_emac_v2_3_0_clk_phy_rx" = "phy_clk_rx";
TIMESPEC "TS_v6_emac_v2_3_0_clk_phy_rx" = PERIOD "v6_emac_v2_3_0_clk_phy_rx" 7.5 ns HIGH 50 %;

# Constrain the host interface clock to an example frequency of 125 MHz
NET "*s_axi_aclk"                 TNM_NET  = "clk_axi";
TIMEGRP "v6_emac_v2_3_0_config_clk" = "clk_axi";
TIMESPEC "TS_v6_emac_v2_3_0_config_clk"      = PERIOD "v6_emac_v2_3_0_config_clk" 8 ns HIGH 50 %;

# define TIGs between unrelated clock domains
#TIMESPEC "TS_clock_path_gtx2cpu" = FROM "clock_generator_clkout0" TO "clock_generator_clkout1" TIG;
#TIMESPEC "TS_clock_path_gtx2ref" = FROM "clock_generator_clkout0" TO "clock_generator_clkout2" TIG;
#TIMESPEC "TS_clock_path_cpu2gtx" = FROM "clock_generator_clkout1" TO "clock_generator_clkout0" TIG;
PIN "*bufgmux_speed_clk.I1" TIG;
PIN "*bufgmux_speed_clk.CE0" TIG;

# define TIGs on reset synchronizer FDPE PRE inputs
PIN "*reset_sync1.PRE" TIG;
PIN "*reset_sync2.PRE" TIG;

#
####
#######
##########
#############
#################
#FIFO BLOCK CONSTRAINTS


###############################################################################
# AXI FIFO CONSTRAINTS
# The following constraints are necessary for proper operation of the AXI
# FIFO. If you choose to not use the FIFO Block level of wrapper hierarchy,
# these constraints should be removed.
###############################################################################

# AXI FIFO transmit-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?tx_fifo_i?rd_tran_frame_tog"    TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_retran_frame_tog"  TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*"       TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_txfer_tog"         TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?wr_frame_in_fifo"     TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr" = FROM "tx_fifo_rd_to_wr" TO "v6_emac_v2_3_0_clk_ref_mux" 8 ns DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd" = FROM "tx_fifo_wr_to_rd" TO "v6_emac_v2_3_0_clk_ref_mux" 8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*"          TNM = "tx_metastable";
INST "*user_side_FIFO?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable";
TIMESPEC "TS_tx_meta_protect" = FROM "tx_metastable" 5 ns DATAPATHONLY;

# Transmit-side AXI FIFO address bus timing
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_addr_rd";
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*"    TNM = "tx_addr_wr";
TIMESPEC "TS_tx_fifo_addr" = FROM "tx_addr_rd" TO "tx_addr_wr" 10 ns;

# AXI FIFO receive-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?rx_fifo_i?wr_store_frame_tog" TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO?rx_fifo_i?rd_addr*"           TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd" = FROM "rx_fifo_wr_to_rd" TO "v6_emac_v2_3_0_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr" = FROM "rx_fifo_rd_to_wr" TO "v6_emac_v2_3_0_clk_phy_rx"  8 ns DATAPATHONLY;


#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

# Locate the Tri-Mode Ethernet MAC instance
INST "*v6_emac" LOC = "TEMAC_X0Y0";

###############################################################################
# PHYSICAL INTERFACE CONSTRAINTS
# The following constraints are necessary for proper operation, and are tuned
# for this example design. They should be modified to suit your design.
###############################################################################

# GMII physical interface constraints
# -----------------------------------------------------------------------------

# Set the IDELAY values on the PHY inputs, tuned for this example design.
# These values should be modified to suit your design.
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd"   IDELAY_VALUE = 23;

# Group all IDELAY-related blocks to use a single IDELAYCTRL
INST "*dlyctrl"                                      IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd"   IODELAY_GROUP = gmii_idelay;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2 ns setup time and 0 ns hold time.
INST "gmii_rxd<?>" TNM = "gmii_rx";
INST "gmii_rx_dv"  TNM = "gmii_rx";
INST "gmii_rx_er"  TNM = "gmii_rx";
TIMEGRP "gmii_rx" OFFSET = IN 2 ns VALID 2 ns BEFORE "gmii_rx_clk" RISING;

# Constrain the GMII physical interface flip-flops to IOBs
INST "*v6emac_block*gmii_interface*rxd_to_mac*"  IOB = true;
INST "*v6emac_block*gmii_interface*rx_dv_to_mac" IOB = true;
INST "*v6emac_block*gmii_interface*rx_er_to_mac" IOB = true;
INST "*v6emac_block*gmii_interface*gmii_txd_?"   IOB = true;
INST "*v6emac_block*gmii_interface*gmii_tx_en"   IOB = true;
INST "*v6emac_block*gmii_interface*gmii_tx_er"   IOB = true;

# Location constraints are chosen for this example design.
# These values should be modified to suit your design.
# * Note that regional clocking imposes certain requirements
#   on the location of the physical interface pins and the TEMAC instance.
#   Please refer to the Virtex-6 FPGA Embedded Tri-Mode Ethernet MAC
#   User Guide for additional details. *

# Locate the GMII physical interface pins
# Locate the 125 MHz reference clock buffer
INST "*BUFGMUX_SPEED_CLK" LOC = "BUFGCTRL_X0Y6";



